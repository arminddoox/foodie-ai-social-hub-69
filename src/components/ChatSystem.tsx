
import { useState } from 'react';
import { ChatMessage, ChatContact } from './chat/types';
import ChatContactList from './chat/ChatContactList';
import ChatWindow from './chat/ChatWindow';

const ChatSystem = () => {
  const [activeChat, setActiveChat] = useState<string>('ai-bot');
  const [message, setMessage] = useState('');

  const contacts: ChatContact[] = [
    {
      id: 'ai-bot',
      name: 'FoodieAI Assistant',
      avatar: '/placeholder.svg',
      lastMessage: 'T√¥i c√≥ th·ªÉ g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi b·∫°n!',
      timestamp: '5 ph√∫t',
      unread: 0,
      type: 'ai'
    },
    {
      id: 'store-1',
      name: 'Qu√°n Ph·ªü H√† N·ªôi',
      avatar: '/placeholder.svg',
      lastMessage: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã',
      timestamp: '15 ph√∫t',
      unread: 2,
      type: 'store'
    },
    {
      id: 'friend-1',
      name: 'Minh Th∆∞',
      avatar: '/placeholder.svg',
      lastMessage: 'Qu√°n b√°nh m√¨ m·ªõi n√†y ngon l·∫Øm!',
      timestamp: '1 gi·ªù',
      unread: 1,
      type: 'friend'
    },
    {
      id: 'store-2',
      name: 'B√∫n B√≤ Hu·∫ø C√¥ Ba',
      avatar: '/placeholder.svg',
      lastMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!',
      timestamp: '2 gi·ªù',
      unread: 0,
      type: 'store'
    }
  ];

  const chatMessages: Record<string, ChatMessage[]> = {
    'ai-bot': [
      {
        id: '1',
        sender: 'FoodieAI',
        message: 'Xin ch√†o! T√¥i l√† FoodieAI, tr·ª£ l√Ω ·∫©m th·ª±c c·ªßa b·∫°n. H√¥m nay b·∫°n mu·ªën ƒÉn g√¨?',
        timestamp: '10:30',
        isUser: false
      },
      {
        id: '2',
        sender: 'B·∫°n',
        message: 'T√¥i mu·ªën m√≥n g√¨ ƒë√≥ cay cay, ·∫•m b·ª•ng',
        timestamp: '10:32',
        isUser: true
      },
      {
        id: '3',
        sender: 'FoodieAI',
        message: 'Tuy·ªát! D·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, t√¥i g·ª£i √Ω:',
        timestamp: '10:32',
        isUser: false
      },
      {
        id: '4',
        sender: 'FoodieAI',
        message: 'üå∂Ô∏è B√∫n b√≤ Hu·∫ø - Cay n·ªìng, ƒë·∫≠m ƒë√†\nüç≤ L·∫©u Th√°i chua cay - T√¥m c√° t∆∞∆°i ngon\nü•ò Curry g√† - ·∫§m b·ª•ng, th∆°m l·ª´ng',
        timestamp: '10:33',
        isUser: false,
        type: 'suggestion'
      }
    ],
    'store-1': [
      {
        id: '1',
        sender: 'Qu√°n Ph·ªü H√† N·ªôi',
        message: 'Ch√†o b·∫°n! ƒê∆°n h√†ng #PH001 c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.',
        timestamp: '09:45',
        isUser: false
      },
      {
        id: '2',
        sender: 'Qu√°n Ph·ªü H√† N·ªôi',
        message: '- 1x Ph·ªü b√≤ t√°i\n- 1x N∆∞·ªõc cam\nT·ªïng: 85,000 VNƒê',
        timestamp: '09:46',
        isUser: false,
        type: 'order'
      },
      {
        id: '3',
        sender: 'Qu√°n Ph·ªü H√† N·ªôi',
        message: 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã. Th·ªùi gian giao h√†ng d·ª± ki·∫øn: 25-30 ph√∫t.',
        timestamp: '10:15',
        isUser: false
      }
    ],
    'friend-1': [
      {
        id: '1',
        sender: 'Minh Th∆∞',
        message: 'H√¥m nay m√¨nh th·ª≠ qu√°n b√°nh m√¨ m·ªõi ·ªü ƒë∆∞·ªùng Nguy·ªÖn Tr√£i!',
        timestamp: '09:20',
        isUser: false
      },
      {
        id: '2',
        sender: 'B·∫°n',
        message: 'Ngon kh√¥ng? Gi√° bao nhi√™u v·∫≠y?',
        timestamp: '09:25',
        isUser: true
      },
      {
        id: '3',
        sender: 'Minh Th∆∞',
        message: 'Ngon l·∫Øm! Ch·ªâ 25k/·ªï th√¥i. Th·ªãt n∆∞·ªõng th∆°m ph·ª©c, rau t∆∞∆°i xanh.',
        timestamp: '09:30',
        isUser: false
      }
    ]
  };

  const handleSendMessage = () => {
    if (!message.trim()) return;
    
    // Add user message to chat
    console.log('Sending message:', message);
    setMessage('');

    // Simulate AI response for AI bot
    if (activeChat === 'ai-bot') {
      setTimeout(() => {
        console.log('AI would respond here');
      }, 1000);
    }
  };

  const currentMessages = chatMessages[activeChat] || [];

  return (
    <div className="max-w-6xl mx-auto h-[600px] p-4">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-full">
        <ChatContactList 
          contacts={contacts}
          activeChat={activeChat}
          onContactSelect={setActiveChat}
        />
        <ChatWindow 
          activeChat={activeChat}
          contacts={contacts}
          messages={currentMessages}
          message={message}
          setMessage={setMessage}
          onSendMessage={handleSendMessage}
        />
      </div>
    </div>
  );
};

export default ChatSystem;
